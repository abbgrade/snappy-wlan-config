package config

import (
	"fmt"
	"gopkg.in/yaml.v2"
	"io/ioutil"
	"os"
	"path"
)

type NetworkConfig struct {
	Interface     string // default wlan0
	ID            string // descriptional name
	Protocol      string // eg. WPA, WPA2, WEP
	SSID          string // network id
	ScanSSID      string // default 0, hidden network
	PSK           string // network password
	KeyManagement string // eg. WPA-PSK
	Pairwise      string // eg. CCMP or TKIP
	Group         string // eg. TKIP or CCMP
	AuthAlgorithm string // SHARED for WEP-shared
	Priority      string // for WEP-shared
}

type Config struct {
	Networks []NetworkConfig
}

func (config *NetworkConfig) Export(file *os.File) {

	export := NetworkExport{}
	export.Add(config)
	export.Save(file)

}

func (config *Config) Save(path string) {

	// dump the YAML
	data, err := yaml.Marshal(&config)
	if err != nil {
		Warning.Fatalf("dump: %v", err)
	}

	// write the file
	ioutil.WriteFile(path, data, 0644)
}

func (config *Config) Load(path string) {

	// does the file exist?
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return
	}

	// read the file
	data, err := ioutil.ReadFile(path)
	if err != nil {
		Warning.Fatalf("load: %v", err)
	}

	Trace.Printf("loaded %v", string(data))

	// parse the YAML
	if err := yaml.Unmarshal([]byte(data), &config); err != nil {
		Warning.Fatalf("parse: %v", err)
	}

}

func (config *Config) Upgrade() {
	// hook for future version changes
}

func (config *Config) Merge(branch Config) {

	// merge networks
	if len(branch.Networks) > 0 {
		config.Networks = branch.Networks
	}
}

func (config *Config) Export(interfacesDirPath string) {

	// sort networks by the interface
	interfaces := make(map[string][]NetworkConfig)

	for _, network := range config.Networks {

		// set default interface to wlan0
		if network.Interface == "" {
			network.Interface = "wlan0"
		}

		// add network to the networks of the same interface
		interfaces[network.Interface] = append(interfaces[network.Interface], network)
	}

	for iface, networks := range interfaces {

		// create a config file for each interface
		interfacePath := path.Join(interfacesDirPath, "interface_"+iface+".conf")
		file, err := os.Create(interfacePath)
		if err != nil {
			Warning.Fatalf("export: %v", err)
		}
		defer file.Close()

		// add a file header
		fmt.Fprintf(file, "# DO NOT CHANGE THIS FILE\n")
		fmt.Fprintf(file, "# This file is generated by snappy-wlan-config,\n")
		fmt.Fprintf(file, "# manual changes may become reversed.\n")
		fmt.Fprintf(file, "\n")

		for _, network := range networks {

			// add each network configuration
			network.Export(file)
			fmt.Fprintf(file, "\n")
			file.Sync()
		}

	}
}
